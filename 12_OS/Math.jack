class Math {
    static Array twoToThe;     

    function void init() {
        var int j;
        
        let j = 1;
		let twoToThe = Array.new(16);
        let twoToThe[0] = 1;

        while (j < 16){
            let twoToThe[j] = twoToThe[j-1] + twoToThe[j-1];	// twoToThe[j-1] * 2
            let j = j + 1;
        }
		
		return;
    }

    function boolean bit(int x, int j) {
        /* private function that is only for internal use */
        var int temp;
        let temp = x & twoToThe[j];

        if (temp = 0){
            return false;
        }

        return true;
    }
 
    function int multiply(int x, int y) {
        /* use long multiply algorithm, which gives O(logN) runtime
            for N-bit binary num */
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;	// same as shiftedX * 2, to avoid recursive call
            let j = j + 1; 
        }

        return sum;
    }

    function int divide(int x, int y) {
        /* use long division algorithm, which gives O(logN) runtime
            for N-bit binary num */
        var int q;
		var int absX, absY;
		var int sign;
		
		let absX = Math.abs(x);
		let absY = Math.abs(y);
		let sign = 1;
		
		if ((x < 0) & (y > 0)){
			let sign = -1;
		}
		if ((x > 0) & (y < 0)){
			let sign = -1;
		}
		
        // y can overflow and become negative as we multiply by 2
        if ((absY > absX) | (absY < 0)) {
            return 0;
        }
        
        let q = Math.divide(absX, 2*absY);
        
        if ((absX-(2*q*absY)) < absY){
            return (2*q) * sign;
		}
        else{
            return (2*q+1) * sign;
        }
    }

    function int abs(int x) {
        if (x > -1){
            return x;
        }
        else{
            return -1 * x;
        }
    }
    
    function int min(int x, int y) {
        if (x<y){
            return x;
        }
        else {
            return y;
        }
    }
	
    function int max(int x, int y) {
        if (x<y){
            return y;
        }
        else {
            return x;
        }
	}

    function int sqrt(int x){
        // if y = sqrt(x), then y^2 = x, plus, sqrt is monotonically increasing
        // find y such that y^2 <= x <= (y+1)^2
        var int y, j, y_2j_squared;
        let j = 7;  // n = 16, n/2 - 1
        let y = 0;

        while (j > -1){
            let y_2j_squared = Math.multiply(y + twoToThe[j], y + twoToThe[j]);

            // y_2j_squared can overflow and be a negative number, so check if it is positive
            if (((y_2j_squared = x) | (y_2j_squared < x)) & (y_2j_squared > 0)){
                let y = y + twoToThe[j];
            }
			let j = j - 1;
        }

        return y;
	}
}


