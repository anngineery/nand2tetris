// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength > 0){
			let str = Array.new(maxLength);
			
		}
		else{
			let str = null;
		}
		let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
		if (~(str = null)){
			do str.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, sum, digit;
        let i = 0;
        let sum = 0;

        while (i < length()){
            let digit = str[i] - 48;    // convert ascii to int
			
			if ((digit > -1) & (digit < 10)){
				let sum =  (10 * sum) + digit;
			}
            let i = i + 1;
        }
		
		if (str[0] = 45){	// minus sign
			return sum * -1;
		}
		else{
			return sum;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int divider, quotient, remainder;
		var int absVal;
        
		let length = 0;	// reset the length, bc we are overriding
        let divider = 10; 
		let absVal = Math.abs(val);
        let quotient = val / divider;	// if val is (-), this will be (-)
        let remainder = Math.abs(val - (divider * quotient));	// if val is (-), remainder becomes (-). To prevent that, use abs()
            
        if (absVal < 10){
			if (val < 0){
				do appendChar(45);	// 45 is the minus sign
			}
            do appendChar(absVal + 48);
        }
        else{
            do setInt(val/10);
			do appendChar(remainder + 48);
        }
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}


